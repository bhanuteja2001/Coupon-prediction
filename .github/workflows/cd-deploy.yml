# 
# This workflow is triggered on pushes to the 'develop' branch.
# It performs the following steps:
# 1. Checks out the repository
# 2. Configures AWS credentials
# 3. Sets up Terraform
# 4. Plans and applies Terraform changes to set up infrastructure
# 5. Retrieves and syncs model artifacts from development to production
#
# Note: This workflow assumes you have the necessary AWS credentials
# stored as secrets in your GitHub repository.
#
# Important: The model artifact retrieval process is simplified for
# demonstration purposes. In a production environment, consider
# implementing a more robust method, possibly integrating with
# MLflow or other model versioning tools.

name: CD-Deploy
on:
  push:
    branches:
      - 'develop'
    # Uncomment and modify the following to trigger only on specific file changes
    # paths:
    #   - 'code/**'

env:
  AWS_DEFAULT_REGION: 'eu-west-2'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Plan
        id: tf-plan
        working-directory: 'code/infrastructure'
        run: |
          terraform init -backend-config="key=mlops-zoomcamp-prod.tfstate" -reconfigure
          terraform plan -var-file=vars/prod.tfvars

      - name: Terraform Apply
        id: tf-apply
        working-directory: 'code/infrastructure'
        if: steps.tf-plan.outcome == 'success'
        run: |
          terraform apply -auto-approve -var-file=vars/prod.tfvars
          echo "model_bucket=$(terraform output model_bucket | xargs)" >> $GITHUB_OUTPUT

      - name: Get model artifacts
        id: get-model-artifacts
        working-directory: "code"
        env:
          MODEL_BUCKET_DEV: "mlflow-models-coupon"
          MODEL_BUCKET_PROD: ${{ steps.tf-apply.outputs.model_bucket }}
        run: |
          RUN_ID=$(aws s3api list-objects-v2 --bucket ${MODEL_BUCKET_DEV} \
          --query 'sort_by(Contents, &LastModified)[-1].Key' --output=text | cut -f2 -d/)
          aws s3 sync s3://${MODEL_BUCKET_DEV} s3://${MODEL_BUCKET_PROD}
          echo "run_id=${RUN_ID}" >> $GITHUB_OUTPUT

      # Consider adding additional steps here, such as:
      # - Deployment validation
      # - Running tests on the deployed infrastructure
      # - Notifying relevant parties of successful deployment